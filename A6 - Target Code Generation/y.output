Grammar

    0 $accept: START $end

    1 START: LIST

    2 LIST: STMT
    3     | STMT M LIST

    4 STMT: ASGN
    5     | COND
    6     | LOOP

    7 ASGN: LP set IDEN ATOM RP

    8 COND: LP when BOOL LIST M RP

    9 LOOP: LP loop while_ M BOOL LIST M RP

   10 EXPR: LP OPER ATOM ATOM RP

   11 BOOL: LP RELN ATOM ATOM RP

   12 ATOM: IDEN
   13     | NUMB
   14     | EXPR

   15 OPER: ADD
   16     | SUB
   17     | MUL
   18     | DIV
   19     | MOD

   20 RELN: EQ
   21     | LT
   22     | GT
   23     | LE
   24     | GE
   25     | NE

   26 M: ε


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IDEN <id> (258) 7 12
    NUMB <num> (259) 13
    set <keyword> (260) 7
    when <keyword> (261) 8
    loop <keyword> (262) 9
    while_ <keyword> (263) 9
    ADD <op> (264) 15
    SUB <op> (265) 16
    MUL <op> (266) 17
    DIV <op> (267) 18
    MOD <op> (268) 19
    EQ <relop> (269) 20
    LT <relop> (270) 21
    GT <relop> (271) 22
    LE <relop> (272) 23
    GE <relop> (273) 24
    NE <relop> (274) 25
    LP <punc> (275) 7 8 9 10 11
    RP <punc> (276) 7 8 9 10 11


Nonterminals, with rules where they appear

    $accept (22)
        on left: 0
    START (23)
        on left: 1
        on right: 0
    LIST <stmt> (24)
        on left: 2 3
        on right: 1 3 8 9
    STMT <stmt> (25)
        on left: 4 5 6
        on right: 2 3
    ASGN (26)
        on left: 7
        on right: 4
    COND <stmt> (27)
        on left: 8
        on right: 5
    LOOP <stmt> (28)
        on left: 9
        on right: 6
    EXPR <symb> (29)
        on left: 10
        on right: 14
    BOOL <bools> (30)
        on left: 11
        on right: 8 9
    ATOM <symb> (31)
        on left: 12 13 14
        on right: 7 10 11
    OPER <op> (32)
        on left: 15 16 17 18 19
        on right: 10
    RELN <relop> (33)
        on left: 20 21 22 23 24 25
        on right: 11
    M <instr> (34)
        on left: 26
        on right: 3 8 9


State 0

    0 $accept: • START $end

    LP  shift, and go to state 1

    START  go to state 2
    LIST   go to state 3
    STMT   go to state 4
    ASGN   go to state 5
    COND   go to state 6
    LOOP   go to state 7


State 1

    7 ASGN: LP • set IDEN ATOM RP
    8 COND: LP • when BOOL LIST M RP
    9 LOOP: LP • loop while_ M BOOL LIST M RP

    set   shift, and go to state 8
    when  shift, and go to state 9
    loop  shift, and go to state 10


State 2

    0 $accept: START • $end

    $end  shift, and go to state 11


State 3

    1 START: LIST •

    $default  reduce using rule 1 (START)


State 4

    2 LIST: STMT •
    3     | STMT • M LIST

    LP        reduce using rule 26 (M)
    $default  reduce using rule 2 (LIST)

    M  go to state 12


State 5

    4 STMT: ASGN •

    $default  reduce using rule 4 (STMT)


State 6

    5 STMT: COND •

    $default  reduce using rule 5 (STMT)


State 7

    6 STMT: LOOP •

    $default  reduce using rule 6 (STMT)


State 8

    7 ASGN: LP set • IDEN ATOM RP

    IDEN  shift, and go to state 13


State 9

    8 COND: LP when • BOOL LIST M RP

    LP  shift, and go to state 14

    BOOL  go to state 15


State 10

    9 LOOP: LP loop • while_ M BOOL LIST M RP

    while_  shift, and go to state 16


State 11

    0 $accept: START $end •

    $default  accept


State 12

    3 LIST: STMT M • LIST

    LP  shift, and go to state 1

    LIST  go to state 17
    STMT  go to state 4
    ASGN  go to state 5
    COND  go to state 6
    LOOP  go to state 7


State 13

    7 ASGN: LP set IDEN • ATOM RP

    IDEN  shift, and go to state 18
    NUMB  shift, and go to state 19
    LP    shift, and go to state 20

    EXPR  go to state 21
    ATOM  go to state 22


State 14

   11 BOOL: LP • RELN ATOM ATOM RP

    EQ  shift, and go to state 23
    LT  shift, and go to state 24
    GT  shift, and go to state 25
    LE  shift, and go to state 26
    GE  shift, and go to state 27
    NE  shift, and go to state 28

    RELN  go to state 29


State 15

    8 COND: LP when BOOL • LIST M RP

    LP  shift, and go to state 1

    LIST  go to state 30
    STMT  go to state 4
    ASGN  go to state 5
    COND  go to state 6
    LOOP  go to state 7


State 16

    9 LOOP: LP loop while_ • M BOOL LIST M RP

    $default  reduce using rule 26 (M)

    M  go to state 31


State 17

    3 LIST: STMT M LIST •

    $default  reduce using rule 3 (LIST)


State 18

   12 ATOM: IDEN •

    $default  reduce using rule 12 (ATOM)


State 19

   13 ATOM: NUMB •

    $default  reduce using rule 13 (ATOM)


State 20

   10 EXPR: LP • OPER ATOM ATOM RP

    ADD  shift, and go to state 32
    SUB  shift, and go to state 33
    MUL  shift, and go to state 34
    DIV  shift, and go to state 35
    MOD  shift, and go to state 36

    OPER  go to state 37


State 21

   14 ATOM: EXPR •

    $default  reduce using rule 14 (ATOM)


State 22

    7 ASGN: LP set IDEN ATOM • RP

    RP  shift, and go to state 38


State 23

   20 RELN: EQ •

    $default  reduce using rule 20 (RELN)


State 24

   21 RELN: LT •

    $default  reduce using rule 21 (RELN)


State 25

   22 RELN: GT •

    $default  reduce using rule 22 (RELN)


State 26

   23 RELN: LE •

    $default  reduce using rule 23 (RELN)


State 27

   24 RELN: GE •

    $default  reduce using rule 24 (RELN)


State 28

   25 RELN: NE •

    $default  reduce using rule 25 (RELN)


State 29

   11 BOOL: LP RELN • ATOM ATOM RP

    IDEN  shift, and go to state 18
    NUMB  shift, and go to state 19
    LP    shift, and go to state 20

    EXPR  go to state 21
    ATOM  go to state 39


State 30

    8 COND: LP when BOOL LIST • M RP

    $default  reduce using rule 26 (M)

    M  go to state 40


State 31

    9 LOOP: LP loop while_ M • BOOL LIST M RP

    LP  shift, and go to state 14

    BOOL  go to state 41


State 32

   15 OPER: ADD •

    $default  reduce using rule 15 (OPER)


State 33

   16 OPER: SUB •

    $default  reduce using rule 16 (OPER)


State 34

   17 OPER: MUL •

    $default  reduce using rule 17 (OPER)


State 35

   18 OPER: DIV •

    $default  reduce using rule 18 (OPER)


State 36

   19 OPER: MOD •

    $default  reduce using rule 19 (OPER)


State 37

   10 EXPR: LP OPER • ATOM ATOM RP

    IDEN  shift, and go to state 18
    NUMB  shift, and go to state 19
    LP    shift, and go to state 20

    EXPR  go to state 21
    ATOM  go to state 42


State 38

    7 ASGN: LP set IDEN ATOM RP •

    $default  reduce using rule 7 (ASGN)


State 39

   11 BOOL: LP RELN ATOM • ATOM RP

    IDEN  shift, and go to state 18
    NUMB  shift, and go to state 19
    LP    shift, and go to state 20

    EXPR  go to state 21
    ATOM  go to state 43


State 40

    8 COND: LP when BOOL LIST M • RP

    RP  shift, and go to state 44


State 41

    9 LOOP: LP loop while_ M BOOL • LIST M RP

    LP  shift, and go to state 1

    LIST  go to state 45
    STMT  go to state 4
    ASGN  go to state 5
    COND  go to state 6
    LOOP  go to state 7


State 42

   10 EXPR: LP OPER ATOM • ATOM RP

    IDEN  shift, and go to state 18
    NUMB  shift, and go to state 19
    LP    shift, and go to state 20

    EXPR  go to state 21
    ATOM  go to state 46


State 43

   11 BOOL: LP RELN ATOM ATOM • RP

    RP  shift, and go to state 47


State 44

    8 COND: LP when BOOL LIST M RP •

    $default  reduce using rule 8 (COND)


State 45

    9 LOOP: LP loop while_ M BOOL LIST • M RP

    $default  reduce using rule 26 (M)

    M  go to state 48


State 46

   10 EXPR: LP OPER ATOM ATOM • RP

    RP  shift, and go to state 49


State 47

   11 BOOL: LP RELN ATOM ATOM RP •

    $default  reduce using rule 11 (BOOL)


State 48

    9 LOOP: LP loop while_ M BOOL LIST M • RP

    RP  shift, and go to state 50


State 49

   10 EXPR: LP OPER ATOM ATOM RP •

    $default  reduce using rule 10 (EXPR)


State 50

    9 LOOP: LP loop while_ M BOOL LIST M RP •

    $default  reduce using rule 9 (LOOP)
